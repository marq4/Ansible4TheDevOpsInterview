* What is Ansible and why we use it? 
	+ Agentless IT automation tool that replaces scripts with YAML Playbooks. 
	+ Saves time when dealing with many servers. 

* Example use case? 
	+ I want to reboot many servers (web, DB) in some particular order. 

* How does it work? 
	+ No need to install agent on servers that will be managed. 
	+ Linux: SSH. 
	+ Windows: PowerShell Remoting. 

* How do we set it up in a Linux laptop? 
	+ $ sudo apt install ansible 

* Explain why you don't have a local Ansible in your Windows laptop: 
	+ It's not trivial. 
	+ The recommended way to manage remote servers is through WSL, but testing with localhost is challenging as there is no sudo. 
	+ The Python-pip install fails with: "filename too long" and updating the registry does not always work. 

* Verify connectivity to remote server: 
	+ $ ansible targetserver -i inventory -m ping -v 

* What is a Playbook? 
	+ Orchestration language where we define what we want it to do: tasks. 
	+ Play -> tasks -> task: action to be performed in host. 
	+ 	
		- name: play name
	 	  hosts: localhost 
		  tasks: 
			- 
			- 
	+ Hosts are defined in inventory. 
	+ Run it: $ ansible-playbook playbook.yml 		// $ ansible-playbook --help 
	+ Verify it: 
		- $ ansible-lint 
		- Syntax validate: --syntac-check 
		- Check (dry) Mode: --check 			// Task skipped if not supported by module. 
		- Diff Mode: --diff 				// Check mode required too. 

* How do we cofigure its default behaviour, location of Inventory and Log files? 
	+ In /etc/ansible/ansible.cfg: *4
	[defaults] 
	inventory 		= /etc/ansible/hosts 
	log_path  		= /var/log/ansible.log 

* How to configure Ansible for multiple fleets of servers like web, DB? 
	+ Replicate and edit default ansible.cfg to /opt/ansible_playbooks/web, db; to override defaults. *2 

* Override all defaults and all /opt/ansible_playbooks temporarily? 
	+ Create special tmp-ansible.cfg under /root. 
	+ $ export ANSIBLE_CONFIG=/root/tmp-ansible.cfg ansible-playbook playbook.yml # *1 

* Override a single param without copying & editing a config file? 
	+ Set env var ANSIBLE_ + name of param uppercase: $ export ANSIBLE_GATHERING=explicit 
	+ Verify with: $ ansible-config list 

* Take a look at the current config? 
	+ $ ansible-config dump 

* What is "Control Machine"? 
	+ My laptop where Ansible CLI is installed. 

* What is Inventory? 
	+ Information about target systems. 
	+ Default: /etc/ansible/hosts 
	+ Example (ini format): 
		[web]
		server1.company.com
		server2.company.com
		[db]					// Group. 
		db ansible_host=server3.company.com		// Alias. 

* Edit inventory file to add "db" server (define group databases) @ server4.company.com which is a Windows host (admin/pA$$wd): 
	+ 	[databases]
		db ansible_host=server4.company.com ansible_connection=winrm ansible_user=admin ansible_password=pA$$wd 
* Now define a super group "all" that contains groups databases, webservers, appservers: 
	+ 	[all:children] 
		databases 
		webservers 
		appservers 

* What is a Module? 
	+ Actions run by tasks. 
	+ Examples: command, script, yum, service. 
	+ $ ansible-doc -l 

* Use modules: 
	+ Execute a Linux command: 			command: date chdir=/etc/ 
	+ Transfer & execute script: 			script: /local/path/script.sh -arg1 -arg2 
	+ Start, stop, restart Linux service: 		service: name=postgres state=started 
	+ Search for a line in a file, replace or add it: 	
						lineinfile: 
							path: /etc/resolv.conf 
							line: 'nameserver 10.1.250.10' 
	+ Create file of not exists: 			file: 
							path: '/var/www/html/index.html' 
							state: touch 
							mode: '0644' 
	+ Add new user (Linux): 			user: 
							name: 'bob' 
							uid: 1040 
							group: QA 






* As we know, to install packages in Linux we use different managers; in Debian: apt. Red Hat: yum. 
What can we do about that? We want a single Playbook that works on both. 
	+ We add a conditional to the tasks: 
		- name: 'Install NGINX on Debian.' 
		  apt: 
		  	name: nginx 
		  	state: present 
		  when: ansible_os_family == "Debian" 
		- name: 'Install NGINX on Red Hat.' 
		   yum: 
			name: nginx 
			state: present 
		  when: ansible_os_family == "RedHat" 


* Check if Apache is down and if so, send email to admin: 
	+ - name: 'Check if Apache is down.' 
	      hosts: localhost 
	      tasks: 
		- command: service httpd status 
		  register: result 
		- mail: 
			to: admin@company.com 
			subject: 'Service Altert' 
			body: 'Apache down!' 
			when: result.stdout.find('down') != -1 

* Install a bunch of packages using a loop:
+ 
	---
	- name: 'Install packages.' 
	  hosts: localhost 
	  become: yes 
	  vars: 
		packages: 
			- httpd 
			- make 
			- vim 
	  tasks: 
		- yum: 
			name: '{{ item }}'
			state: present
		  with_items: '{{ packages }}'  




* Write a simple Playbook to only display info from the hosts (gather facts): 
+ 	---
	- name: Gather facts. 
	  hosts: all 
	  taks: 
	  - debug: 
		var: ansible_facts 

* Write and execute play to install vim, sqlite, jq on nodes defined in "inventory" file:
+ inventory:
	...
	[all:vars]
	app_list=['vim', 'sqlite', 'jq']
	...
+ 	--- 
	- hosts: all
	  become: yes
	  tasks: 
		- name: Install apps. 
		   yum: 
			name: "{{ item }}" 
			state: present 
		   with_items: 
			- "{{ app_list }}"
+ $ ansible-playbook -i inventory app_install.yml 

* Edit inventory to add these user details: (admin, secret_pass, admin@example.com), and use it in Playbook to 
	create user on managed servers: 
	+ inventory:
	...
	[all:vars]
	user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}
	...
	+
	---
	- hosts: all 
	  become: yes
	  tasks: 
		- name: Set up admin user. 
		  user:
			name: "{{ user_details.username }}"
			password: "{{ user_details.password }}"
			comment: "{{ user_details.email }}"
			state: present 


* If I use Ansible to update my App code, across many servers, will I ALSO need to remember to restart the service? 
	+ No. That's what Handlers are for. 
	- name: 'Deploy App AND also restart service.' 
	  hosts: app_servers
	  taks: 
		- name: 'Copy app code.' 
		  copy: 
			src: app_code/ 
			dest: /opt/app/
		  notify: 'Restart App service' 		// Must match. 
	  handlers: 
		- name: 'Restart App service' 		// Must match. 
		  service: 
			name: application_service 
			state: restarted 

* Suppose we notify the same handler from each of 4 tasks. How many times will the handler run?	
	+ Just once at the end of the playbook execution. 

* Do I REALLY need to write the steps (tasks) to turn a blank server into a web, DB, backup... 
	+ No. Use a preconfigured ROLE. 
	+ Go to Ansible Galaxy and find the relevant role: $ ansible-galaxy search mysql 
	+ $ ansible-galaxy install user.mysql 
	+ Use it in playbook: 
		- name: "Mysql role." 
		  hosts: db 
		  roles: 
			- role: user.mysql 
			  become: yes 
			  vars: 
				mysql_user_name: admin 
	+ Confirm: $ ansible-galaxy list 

* How do I create my OWN role? 
	+ Go to my-app directory and create "roles" folder. 
	+ Run this command under there to generate the skeleton directory structure: $ ansible-galaxy init custom 
	// This will create dirs: tasks, handlers, vars, defaults, templates. 
	+ Use it in your playbook: 
		- name "Install & config custom app." 
		  hosts: app 
		  roles: 
			- custom 
	// Default loation: /etc/ansible/roles 			// roles_path 


* You are tasked with managing network infra from different vendors. 
What Ansible functionality provides vedor-specific modules, roles, & playbooks. 
	+ Collections. 
	+ Examples: 
		- network.cisco. 
		- network.juniper. 
		- network.arista. 
	+ Install: $ ansible-galaxy collection install network.cisco 				// Q: how do you install a collection in Ansible? 

* Use the appropriate collection to write a playbook that creates an S3 bucket: 
	+ $ ansible-galaxy collection install amazon.aws 
	+	--- 
		- hosts: localhost 
		  collections: 
			- amazon.aws 
		  tasks: 
			- name: 'Create S3 bucket.' 
			  aws_s3_bucket: 
				name: awsome-bucket-ansible-galaxy-collection-amazon-aws-215688 
				region: us-east-1 

* Now deploy an EC2 instance: 
	+ $ ansible-galaxy collection install amazon.aws 
	+ 	--- 
		- hosts: localhost 
		  collections: [amazon.aws] 
		  tasks: 
			- name: 'Launch EC2 instance.' 
			  ec2_instance: 
				name: created-by-ansible 
				region: us-east-1 


* To test a LB we want index.html to say the name of the web-server it's on (as defined on the control machine). 
	+ Use Jinja 2 templating and the template module: 
	+ playbook.yml:
		--- 
		- hosts: web 
		  tasks: 
			- name: "Copy main page to remote web-servers." 
			  template: 
				src: index.html.j2 
				dest: /var/www/nginx-default/index.html 
	+ index.html.j2: 
		...
		<h1>This is {{ inventory_hostname }} server.</h1> <!-- TMP -->
		...




* We want to create an Excel report of our servers: OS version, MEM, cores. 
Suppose they're already defined in "inventory" file under "web" group. 
	+ templates/inventory.csv.j2: 
		hostname, arch, distro, version, Mem MB, cores, processors 
		{% for host in groups['web'] %}
		{{ host }}, {{ hostvars[host]['ansible_architecture'] }}, {{ hostvars[host]['ansible_distribution'] }}, {{ hostvars[host]['ansible_distribution_version'] }}, {{ hostvars[host]['ansible_memtotal_mb'] }}, {{ hostvars[host]['ansible_processor_cores'] }} {{ hostvars[host]['ansible_processor_count'] }} 
		{% endfor %} 
	+ generate_report.yml: 
		--- 
		- hosts: all 
		  tasks: 
			- setup: 
		- hosts: localhost 
		  tasks: 
			- template: 
				src: templates/inventory.csv.j2 
				dest: "C:/inventory.csv" 
			  run_once: yes 
	+ $ ansible-playbook -i inventory generate_report.yml 



* How do we make it more secure? 
	+ Instead of hardcoding the root password in the inventory with ansible_ssh_pass, we set up passwordless SSH with public/private key pairs. 
	+ Ansible Vault. 


// ~/.ansible.cfg *3 
